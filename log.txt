2015-11-24T12:23:26.448Z - info: server started 
{ port: 3000 }
2015-11-24T12:24:30.209Z - info: server started 
{ port: 3000 }
2015-11-24T12:25:06.527Z - info: server started 
{ port: 3000 }
2015-11-24T12:25:22.494Z - info: server started 
{ port: 3000 }
2015-11-24T12:26:26.280Z - info: server started 
{ port: 3000 }
2015-11-24T12:26:37.729Z - info: server started 
{ port: 3000 }
2015-11-24T12:28:05.037Z - info: server started 
{ port: 3000 }
2015-11-24T12:31:36.510Z - info: server started 
{ port: 3000 }
2015-11-24T13:17:56.623Z - info: server started 
{ port: 3000 }
2015-11-24T13:18:51.413Z - info: server started 
{ port: 3000 }
2015-11-24T13:19:33.496Z - info: server started 
{ port: 3000 }
2015-11-24T13:20:22.902Z - info: server started 
{ port: 3000 }
2015-11-24T13:20:25.920Z - info: GET, /data/guestbook
2015-11-24T14:19:04.369Z - info: server started 
{ port: 3000 }
2015-11-24T14:20:25.213Z - info: server started 
{ port: 3000 }
2015-11-24T14:20:58.080Z - info: server started 
{ port: 3000 }
2015-11-24T14:21:36.831Z - info: server started 
{ port: 3000 }
2015-11-24T14:21:43.710Z - info: GET, /data/guestbook
2015-11-24T14:21:43.711Z - warn: invalid params: 
2015-11-29T05:05:56.678Z - info: server started 
{ port: 3000 }
2015-11-29T05:06:33.289Z - info: server started 
{ port: 3000 }
2015-11-29T05:06:33.316Z - info:  
{ data: '' }
2015-11-29T05:07:04.100Z - info: server started 
{ port: 3000 }
2015-11-29T05:07:11.843Z - info: GET, /data/guestbook
2015-11-29T05:07:11.845Z - warn: invalid params: 
2015-11-29T05:07:22.968Z - info: GET, /data/guestbook
2015-11-29T05:07:22.969Z - warn: invalid params: 
2015-11-29T05:08:04.673Z - info: server started 
{ port: 3000 }
2015-11-29T05:10:14.192Z - info: server started 
{ port: 3000 }
2015-11-29T05:10:17.734Z - info: GET, /data/guestbook
2015-11-29T05:10:17.740Z - warn: invalid params: 
2015-11-29T05:11:31.776Z - info: server started 
{ port: 3000 }
2015-11-29T05:11:36.879Z - info: GET, /data/guestbook
2015-11-29T05:11:36.880Z - warn: invalid params: 
2015-11-29T05:12:49.950Z - info: server started 
{ port: 3000 }
2015-11-29T05:12:54.064Z - info: GET, /data/guestbook
2015-11-29T05:12:54.739Z - debug:  
{ resp: 
   { domain: null,
     _events: { prefinish: [Function: resOnFinish] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: false,
     _hangupClose: false,
     _headerSent: false,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: 
         { fd: undefined,
           reading: true,
           owner: { '$ref': '$["resp"]["socket"]' },
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parent: null,
        _host: null,
        _readableState: 
         { objectMode: false,
           highWaterMark: 16384,
           buffer: [],
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null,
           resumeScheduled: false },
        readable: true,
        domain: null,
        _events: 
         { end: 
            [ { [Function: g] listener: [Function: onend] },
              [Function: socketOnEnd] ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: [ [Function: socketOnError] ],
           close: 
            [ [Function: serverSocketCloseListener],
              [Function: onServerResponseClose] ],
           data: [Function: socketOnData] },
        _maxListeners: undefined,
        _writableState: 
         { objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false },
        writable: true,
        allowHalfOpen: true,
        destroyed: false,
        bytesRead: 1500,
        _bytesDispatched: 1021001,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         { domain: null,
           _events: 
            { request: 
               { [Function]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 once: [Function: once],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: { app: [Circular] },
                 response: { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'c:\\lastiverse\\wedding-invitation\\views',
                    'jsonp callback name': 'callback',
                    port: 3000 },
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'c:\\lastiverse\\wedding-invitation\\views',
                       'jsonp callback name': 'callback',
                       port: 3000 } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ { handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       { handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       { handle: [Function: jsonParser],
                         name: 'jsonParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       { handle: [Function: urlencodedParser],
                         name: 'urlencodedParser',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       { handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                         route: undefined },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '/data/guestbook',
                         keys: [],
                         regexp: /^\/data\/guestbook\/?$/i,
                         route: 
                          { path: '/data/guestbook',
                            stack: 
                             [ { handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'get' } ],
                            methods: { get: true } } },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/data\/guestbook\/?$/i,
                         route: 
                          { path: '/data/guestbook',
                            stack: 
                             [ { handle: [Function],
                                 name: '<anonymous>',
                                 params: undefined,
                                 path: undefined,
                                 keys: [],
                                 regexp: /^\/?$/i,
                                 method: 'post' } ],
                            methods: { post: true } } } ] } },
              connection: [Function: connectionListener],
              clientError: [Function] },
           _maxListeners: undefined,
           _connections: 2,
           _handle: 
            { fd: undefined,
              reading: false,
              owner: { '$ref': '$["resp"]["socket"]["server"]' },
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '4:null:3000' },
        _idleTimeout: 120000,
        _idleNext: 
         { _connecting: false,
           _hadError: false,
           _handle: 
            { fd: undefined,
              reading: true,
              owner: { '$ref': '$["resp"]["socket"]["_idleNext"]' },
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            { objectMode: false,
              highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null,
              resumeScheduled: false },
           readable: true,
           domain: null,
           _events: 
            { end: 
               [ { [Function: g] listener: [Function: onend] },
                 [Function: socketOnEnd] ],
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain: [ [Function: ondrain], [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function: socketOnError],
              close: [Function: serverSocketCloseListener],
              data: [Function: socketOnData] },
           _maxListeners: undefined,
           _writableState: 
            { objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           destroyed: false,
           bytesRead: 0,
           _bytesDispatched: 0,
           _pendingData: null,
           _pendingEncoding: '',
           server: { '$ref': '$["resp"]["socket"]["server"]' },
           _idleTimeout: 120000,
           _idleNext: 
            { _idleNext: { '$ref': '$["resp"]["socket"]' },
              _idlePrev: { '$ref': '$["resp"]["socket"]["_idleNext"]' } },
           _idlePrev: { '$ref': '$["resp"]["socket"]' },
           _idleStart: 309517564,
           parser: 
            { '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              _headers: [],
              _url: '',
              socket: { '$ref': '$["resp"]["socket"]["_idleNext"]' },
              incoming: null,
              maxHeaderPairs: 2000,
              onIncoming: [Function: parserOnIncoming] },
           _paused: false,
           read: [Function],
           _consuming: true },
        _idlePrev: { '$ref': '$["resp"]["socket"]["_idleNext"]["_idleNext"]' },
        _idleStart: 309518365,
        parser: 
         { '0': [Function: parserOnHeaders],
           '1': [Function: parserOnHeadersComplete],
           '2': [Function: parserOnBody],
           '3': [Function: parserOnMessageComplete],
           _headers: [],
           _url: '',
           socket: { '$ref': '$["resp"]["socket"]' },
           incoming: 
            { _readableState: 
               { objectMode: false,
                 highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: true,
                 endEmitted: false,
                 reading: false,
                 sync: true,
                 needReadable: false,
                 emittedReadable: true,
                 readableListening: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: {},
              _maxListeners: undefined,
              socket: { '$ref': '$["resp"]["socket"]' },
              connection: { '$ref': '$["resp"]["socket"]' },
              httpVersionMajor: 1,
              httpVersionMinor: 1,
              httpVersion: '1.1',
              complete: true,
              headers: 
               { host: 'localhost:3000',
                 connection: 'keep-alive',
                 pragma: 'no-cache',
                 'cache-control': 'no-cache',
                 'user-agent': 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5',
                 accept: '*/*',
                 referer: 'http://localhost:3000/',
                 'accept-encoding': 'gzip, deflate, sdch',
                 'accept-language': 'ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4',
                 cookie: 'JSESSIONID=3C04B3300AEEDE826F87B6DF5476BDAA' },
              rawHeaders: 
               [ 'Host',
                 'localhost:3000',
                 'Connection',
                 'keep-alive',
                 'Pragma',
                 'no-cache',
                 'Cache-Control',
                 'no-cache',
                 'User-Agent',
                 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_2_1 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5',
                 'Accept',
                 '*/*',
                 'Referer',
                 'http://localhost:3000/',
                 'Accept-Encoding',
                 'gzip, deflate, sdch',
                 'Accept-Language',
                 'ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4',
                 'Cookie',
                 'JSESSIONID=3C04B3300AEEDE826F87B6DF5476BDAA' ],
              trailers: {},
              rawTrailers: [],
              _pendings: [],
              _pendingIndex: 0,
              upgrade: false,
              url: '/data/guestbook?startUUID=top&count=10',
              method: 'GET',
              statusCode: null,
              statusMessage: null,
              client: { '$ref': '$["resp"]["socket"]' },
              _consuming: false,
              _dumped: false,
              next: [Function: next],
              baseUrl: '',
              originalUrl: '/data/guestbook?startUUID=top&count=10',
              _parsedUrl: 
               { protocol: null,
                 slashes: null,
                 auth: null,
                 host: null,
                 port: null,
                 hostname: null,
                 hash: null,
                 search: '?startUUID=top&count=10',
                 query: 'startUUID=top&count=10',
                 pathname: '/data/guestbook',
                 path: '/data/guestbook?startUUID=top&count=10',
                 href: '/data/guestbook?startUUID=top&count=10',
                 _raw: '/data/guestbook?startUUID=top&count=10' },
              params: {},
              query: { startUUID: 'top', count: '10' },
              res: { '$ref': '$["resp"]' },
              body: {},
              _parsedOriginalUrl: 
               { protocol: null,
                 slashes: null,
                 auth: null,
                 host: null,
                 port: null,
                 hostname: null,
                 hash: null,
                 search: '?startUUID=top&count=10',
                 query: 'startUUID=top&count=10',
                 pathname: '/data/guestbook',
                 path: '/data/guestbook?startUUID=top&count=10',
                 href: '/data/guestbook?startUUID=top&count=10',
                 _raw: '/data/guestbook?startUUID=top&count=10' },
              route: 
               { path: '/data/guestbook',
                 stack: 
                  [ { handle: [Function],
                      name: '<anonymous>',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/?$/i,
                      method: 'get' } ],
                 methods: { get: true } } },
           maxHeaderPairs: 2000,
           onIncoming: [Function: parserOnIncoming] },
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: { '$ref': '$["resp"]' } },
     connection: { '$ref': '$["resp"]["socket"]' },
     _header: null,
     _headers: { 'x-powered-by': 'Express' },
     _headerNames: { 'x-powered-by': 'X-Powered-By' },
     req: { '$ref': '$["resp"]["socket"]["parser"]["incoming"]' },
     locals: {} } }
2015-11-29T05:12:54.765Z - warn: invalid params: 
2015-11-29T05:15:04.957Z - info: server started 
{ port: 3000 }
2015-11-29T05:15:18.848Z - info: server started 
{ port: 3000 }
2015-11-29T05:15:22.454Z - info: GET, /data/guestbook
2015-11-29T05:16:15.786Z - info: server started 
{ port: 3000 }
2015-11-29T05:16:17.539Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:16:53.158Z - info: server started 
{ port: 3000 }
2015-11-29T05:16:56.079Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:19:59.644Z - info: server started 
{ port: 3000 }
2015-11-29T05:20:03.119Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:20:38.089Z - info: server started 
{ port: 3000 }
2015-11-29T05:20:39.536Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:22:01.844Z - info: server started 
{ port: 3000 }
2015-11-29T05:22:08.712Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:24:19.476Z - info: server started 
{ port: 3000 }
2015-11-29T05:24:21.692Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:29:40.290Z - info: server started 
{ port: 3000 }
2015-11-29T05:29:42.549Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:31:47.422Z - info: server started 
{ port: 3000 }
2015-11-29T05:31:50.092Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:31:56.451Z - info: POST , /data/guestbook 
{ name: 'asdf', msg: 'asdf' }
2015-11-29T05:31:56.458Z - error: 
2015-11-29T05:32:41.532Z - info: server started 
{ port: 3000 }
2015-11-29T05:33:14.162Z - info: server started 
{ port: 3000 }
2015-11-29T05:33:14.176Z - debug:  
{ data: '[object Object]' }
2015-11-29T05:34:11.853Z - info: server started 
{ port: 3000 }
2015-11-29T05:34:13.802Z - info: GET, /data/guestbook 
{ startUUID: 'top', count: '10' }
2015-11-29T05:34:18.433Z - info: POST , /data/guestbook 
{ name: 'asdf', msg: 'ㅁㄴㅇㄹ' }
2015-11-29T05:34:18.485Z - debug:  
{ book: 
   { uuid: 'af64bf63-b0d9-4d1b-a0c2-72bcbc027801',
     name: 'asdf',
     msg: 'ㅁㄴㅇㄹ',
     regdate: Sun Nov 29 2015 14:34:18 GMT+0900 (대한민국 표준시) } }
2015-11-29T05:34:18.499Z - error: 
2015-11-29T06:54:29.856Z - info: server started 
{ port: 3000 }
2015-11-29T06:54:35.050Z - info: GET, /data/guestbook 
{ startUUID: 'top' }
2015-11-29T06:54:35.057Z - warn: invalid params:  
{ startUUID: 'top' }
2015-11-29T06:55:38.512Z - info: server started 
{ port: 3000 }
2015-11-29T06:55:54.312Z - info: GET, /data/guestbook 
{ startUUID: 'top' }
2015-11-29T06:55:54.315Z - warn: invalid params:  
{ startUUID: 'top' }
2015-11-29T06:56:42.969Z - info: server started 
{ port: 3000 }
2015-11-29T06:56:49.542Z - info: GET, /data/guestbook 
{ startUUID: 'top' }
2015-11-29T06:56:49.549Z - warn: invalid params:  
{ startUUID: 'top' }
2015-11-29T07:05:33.858Z - info: GET, /data/guestbook 
{ startUUID: 'top' }
2015-11-29T07:05:33.867Z - warn: invalid params:  
{ startUUID: 'top' }
2015-11-29T07:05:38.591Z - info: server started 
{ port: 3000 }
2015-11-29T07:05:40.827Z - info: GET, /data/guestbook 
{ startUUID: 'top' }
2015-11-29T07:05:40.829Z - warn: invalid params:  
{ startUUID: 'top' }
2015-11-29T07:06:24.809Z - info: server started 
{ port: 3000 }
2015-11-29T07:06:40.652Z - info: server started 
{ port: 3000 }
2015-11-29T07:06:41.572Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:07:42.644Z - info: server started 
{ port: 3000 }
2015-11-29T07:07:44.235Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:08:12.572Z - info: server started 
{ port: 3000 }
2015-11-29T07:08:13.878Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:09:04.951Z - info: server started 
{ port: 3000 }
2015-11-29T07:09:06.504Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:10:04.192Z - info: server started 
{ port: 3000 }
2015-11-29T07:10:08.025Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:10:08.039Z - debug: cp1
2015-11-29T07:10:29.932Z - info: server started 
{ port: 3000 }
2015-11-29T07:10:37.335Z - info: server started 
{ port: 3000 }
2015-11-29T07:10:38.523Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:10:47.142Z - info: POST , /data/guestbook 
{ name: 't1', msg: '123' }
2015-11-29T07:10:54.332Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:13:27.529Z - info: server started 
{ port: 3000 }
2015-11-29T07:13:31.055Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:13:34.900Z - info: POST , /data/guestbook 
{ name: 'asdf', msg: 'ㅈㅈㅈㅈㅈ' }
2015-11-29T07:13:50.793Z - info: server started 
{ port: 3000 }
2015-11-29T07:13:53.162Z - info: server started 
{ port: 3000 }
2015-11-29T07:13:54.479Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:13:59.451Z - info: POST , /data/guestbook 
{ name: 'ㄴㄴㄴ', msg: 'ㄴㄴㄴ' }
2015-11-29T07:13:59.495Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:14:19.090Z - info: server started 
{ port: 3000 }
2015-11-29T07:14:21.092Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:14:25.838Z - info: POST , /data/guestbook 
{ name: 'ㅁㄴㅇㄹ', msg: 'ㅈㄷㄹㅈ' }
2015-11-29T07:14:25.874Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:14:52.812Z - info: server started 
{ port: 3000 }
2015-11-29T07:14:54.003Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:16:06.417Z - info: server started 
{ port: 3000 }
2015-11-29T07:16:08.077Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:16:24.512Z - info: server started 
{ port: 3000 }
2015-11-29T07:16:25.533Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:16:43.536Z - info: server started 
{ port: 3000 }
2015-11-29T07:16:44.744Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:18:30.141Z - info: server started 
{ port: 3000 }
2015-11-29T07:18:30.935Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:18:38.239Z - info: POST , /data/guestbook 
{ name: 'ㅁㄴㅇㄹ', msg: 'ㅈㄷㄹㅈㄷ' }
2015-11-29T07:18:38.270Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:19:00.593Z - info: server started 
{ port: 3000 }
2015-11-29T07:19:02.095Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:19:04.922Z - info: POST , /data/guestbook 
{ name: 'ㅈㄷㄹ', msg: 'ㅈㄷㄹㅈ' }
2015-11-29T07:19:04.958Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:19:28.175Z - info: server started 
{ port: 3000 }
2015-11-29T07:19:29.204Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:19:32.900Z - info: POST , /data/guestbook 
{ name: 'ㅁㄴㅇㄹㅈ', msg: 'ㅈㄷㄹㅁㄴㅇㄹ' }
2015-11-29T07:19:32.940Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:21:50.691Z - info: server started 
{ port: 3000 }
2015-11-29T07:21:55.916Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:22:03.160Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:22:31.152Z - info: server started 
{ port: 3000 }
2015-11-29T07:22:34.627Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:22:46.164Z - info: server started 
{ port: 3000 }
2015-11-29T07:22:47.159Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:24:07.668Z - info: server started 
{ port: 3000 }
2015-11-29T07:24:09.465Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:26:40.469Z - info: server started 
{ port: 3000 }
2015-11-29T07:26:41.748Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:27:37.608Z - info: server started 
{ port: 3000 }
2015-11-29T07:27:39.033Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:29:41.578Z - info: server started 
{ port: 3000 }
2015-11-29T07:29:42.377Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:30:05.448Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:30:19.349Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:30:21.408Z - info: GET, /data/guestbook 
{ page: '2' }
2015-11-29T07:30:23.149Z - info: GET, /data/guestbook 
{ page: '3' }
2015-11-29T07:31:14.815Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:31:19.670Z - info: server started 
{ port: 3000 }
2015-11-29T07:31:21.057Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:31:23.468Z - info: GET, /data/guestbook 
{ page: '2' }
2015-11-29T07:31:24.205Z - info: GET, /data/guestbook 
{ page: '3' }
2015-11-29T07:31:24.880Z - info: GET, /data/guestbook 
{ page: '4' }
2015-11-29T07:31:37.524Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:31:39.252Z - info: GET, /data/guestbook 
{ page: '2' }
2015-11-29T07:31:39.867Z - info: GET, /data/guestbook 
{ page: '3' }
2015-11-29T07:31:40.530Z - info: GET, /data/guestbook 
{ page: '4' }
2015-11-29T07:31:50.004Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:31:57.819Z - info: POST , /data/guestbook 
{ name: 'asdf', msg: 'asdf' }
2015-11-29T07:31:57.848Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:32:02.164Z - info: POST , /data/guestbook 
{ name: 'wef', msg: 'wefwef' }
2015-11-29T07:32:02.196Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:32:07.567Z - info: POST , /data/guestbook 
{ name: 'asdfasdf', msg: 'asdfwefw' }
2015-11-29T07:32:07.631Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:32:09.707Z - info: GET, /data/guestbook 
{ page: '2' }
2015-11-29T07:32:14.481Z - info: POST , /data/guestbook 
{ name: 'asdf', msg: 'asdfasdf' }
2015-11-29T07:32:14.576Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:32:16.115Z - info: GET, /data/guestbook 
{ page: '2' }
2015-11-29T07:32:21.050Z - info: POST , /data/guestbook 
{ name: 'asdfasd', msg: 'asdfasdf' }
2015-11-29T07:32:21.090Z - info: GET, /data/guestbook 
{ page: '1' }
2015-11-29T07:32:23.075Z - info: GET, /data/guestbook 
{ page: '2' }
